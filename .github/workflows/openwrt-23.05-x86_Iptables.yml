#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: openwrt-23.05-x86_Iptables

on:
  repository_dispatch:
#  schedule:
#    - cron: 0 21 * * *
  workflow_dispatch:

env:
  REPO_URL: https://github.com/openwrt/openwrt.git
  REPO_BRANCH: openwrt-23.05
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/x86/openwrt-23.05/Iptables_23.05.config
   # CONFIG_URL: https://raw.githubusercontent.com/sdhz153/Actions-OpenWrt/main/config/x86/openwrt-23.05/nftables.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Add package
      id: delete
      run: |
        cd openwrt
        git clone -b main https://github.com/xiaorouji/openwrt-passwall-packages.git package/passwall

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Merge duplicates
      run: |
        cd openwrt
        sudo rm -rf package/feeds/packages/sing-box
        sudo rm -rf feeds/packages/net/sing-box
        sudo rm -rf package/feeds/packages/v2ray-core
        sudo rm -rf feeds/packages/net/v2ray-core
        sudo rm -rf package/feeds/packages/xray-core
        sudo rm -rf feeds/packages/net/xray-core

    - name: Add passwall2
      id: passwall2
      run: |
       cd openwrt
       mkdir -p feeds/luci/applications/passwall2
       cd feeds/luci/applications/passwall2
       git init
       git remote add origin https://github.com/xiaorouji/openwrt-passwall2.git
       git config core.sparsecheckout true
       echo "luci-app-passwall2" >> .git/info/sparse-checkout
       git pull --depth 1 origin main

    - name: Add app vlmcsd
      id: appvlmcsd
      run: |
       cd openwrt
       mkdir -p feeds/luci/applications/luci-app-vlmcsd
       cd feeds/luci/applications/luci-app-vlmcsd
       git init
       git remote add origin https://github.com/immortalwrt/luci.git
       git config core.sparsecheckout true
       echo "applications/luci-app-vlmcsd" >> .git/info/sparse-checkout
       git pull --depth 1 origin openwrt-23.05

    - name: Add vlmcsd
      id: vlmcsd
      run: |
       cd openwrt
       mkdir -p package/vlmcsd
       cd package/vlmcsd
       git init
       git remote add origin https://github.com/immortalwrt/packages.git
       git config core.sparsecheckout true
       echo "net/vlmcsd" >> .git/info/sparse-checkout
       git pull --depth 1 origin openwrt-23.05

    - name: update golang
      run: |
       cd openwrt
       rm -rf feeds/packages/lang/golang/*
       rm -rf package/feeds/packages/golang
       cd feeds/packages/lang/golang
       git init
       git remote add origin https://github.com/openwrt/packages.git
       git config core.sparsecheckout true
       echo "lang/golang" >> .git/info/sparse-checkout
       git pull --depth 1 origin master

    - name: Soft connection
      id: soft
      run: |
       cd openwrt
       mkdir -p package/feeds/luci
       mv feeds/luci/applications/luci-app-vlmcsd/applications/luci-app-vlmcsd/* feeds/luci/applications/luci-app-vlmcsd
       rm -rf feeds/luci/applications/luci-app-vlmcsd/applications
       rm -rf feeds/luci/applications/luci-app-vlmcsd/.git
       ln -sf ../../../feeds/luci/applications/luci-app-vlmcsd package/feeds/luci/luci-app-vlmcsd
       mv package/vlmcsd/net/vlmcsd/* package/vlmcsd
       rm -rf package/vlmcsd/net
       rm -rf package/vlmcsd/.git
       rsync -a feeds/luci/applications/passwall2/luci-app-passwall2/* feeds/luci/applications/luci-app-passwall2
       rm -rf feeds/luci/applications/passwall2
       ln -sf ../../../feeds/luci/applications/luci-app-passwall2 package/feeds/luci/luci-app-passwall2
       rsync -a feeds/packages/lang/golang/lang/golang/* feeds/packages/lang/golang
       rm -rf feeds/packages/lang/golang/lang
       rm -rf feeds/packages/lang/golang/.git
       ln -sf ../../../feeds/packages/lang/golang package/feeds/packages/golang
       git apply $GITHUB_WORKSPACE/patches/Iptables_passwall2.patch

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        if [[ $CONFIG_URL && $CONFIG_FILE ]]; then
           wget -P ${CONFIG_FILE} ${CONFIG_URL}
           [ -e $CONFIG_FILE/* ] && mv $CONFIG_FILE/* openwrt/.config
           echo "==================="
           echo "远程下载config设置完成"
           echo "==================="
        elif [[ ! $CONFIG_URL && $CONFIG_FILE ]]; then
           [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
           echo "==================="
           echo "复制本地config设置完成"
           echo "==================="
        fi
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"23.05-Iptables"-"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M"-"openwrt-23.05-Iptables")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: sdhz151/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
